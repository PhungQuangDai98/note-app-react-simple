{"version":3,"sources":["component/Main/index.jsx","component/Main/Main.jsx","component/Sidebar/index.jsx","component/Sidebar/Sidebar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Main","activeNote","onUpdateNotes","onEditField","key","value","Date","now","className","type","id","name","autoFocus","title","onChange","e","target","body","onKeyDown","preventDefault","start","selectionStart","end","selectionEnd","console","log","substring","Sidebar","notes","onAddNote","onDeleteNote","setActiveNote","onClick","sort","noteA","noteB","lastModified","map","note","length","substr","toLocaleString","App","useState","JSON","parse","localStorage","getItem","setNotes","useEffect","setItem","stringify","newNote","uuid","pre","newNotes","filter","find","updateNote","updateNotes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","document","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.640602d4.chunk.js","sourcesContent":["import Main from './Main'\nexport default Main","import React from \"react\";\nimport \"../../App.css\";\nconst Main = ({ activeNote, onUpdateNotes }) => {\n  const onEditField = (key, value) => {\n    onUpdateNotes({ ...activeNote, [key]: value, lastModified: Date.now() });\n  };\n\n  function onTabKeyDown(e){\n    if (e.key === 'Tab') {\n      e.preventDefault();\n      let start = e.target.selectionStart;\n      let end = e.target.selectionEnd;\n\n      console.log({start, end});\n      console.log(e.target.value);\n  \n      // set textarea value to: text before caret + tab + text after caret\n      e.target.value = e.target.value.substring(0, start) +\n        \"\\t\" + e.target.value.substring(end);\n      onEditField(\"body\", e.target.value);\n      // put caret at right position again\n      e.target.selectionStart = e.target.selectionEnd = start + 1;\n    }\n  }\n\n  if (!activeNote)\n    return <div className=\"no-active-note\">No Note Selected</div>;\n\n  return (\n    <>\n      <div className=\"app-main\">\n        <div className=\"app-main-note-edit\">\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            autoFocus\n            value={activeNote.title}\n            onChange={(e) => onEditField(e.target.name, e.target.value)}\n          />\n          <textarea\n            id=\"body\"\n            name=\"body\"\n            value={activeNote.body}\n            onChange={(e) => onEditField(e.target.name, e.target.value)}\n            onKeyDown={onTabKeyDown}\n          ></textarea>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Main;\n","import Sidebar from './Sidebar'\nexport default Sidebar","import React from \"react\";\nimport \"../../App.css\";\n\nconst SideBar = ({\n  notes,\n  onAddNote,\n  onDeleteNote,\n  activeNote,\n  setActiveNote,\n}) => {\n  const sortByDate = (noteA, noteB) => noteB.lastModified - noteA.lastModified;\n  return (\n    <>\n      <div className=\"app-sidebar\">\n        <div className=\"app-sidebar-header\">\n          <h1>Notes</h1>\n          <button onClick={onAddNote}>Add</button>\n        </div>\n        <div className=\"app-sidebar-notes\">\n          {notes.sort(sortByDate).map((note) => (\n            <div\n              className={`app-sidebar-note ${\n                note.id === activeNote && \"active\"\n              }`}\n              key={note.id}\n              onClick={() => {setActiveNote(note.id)}}\n            >\n              <div className=\"sidebar-note-title\">\n                <strong>{note.title}</strong>\n                <button onClick={() => onDeleteNote(note.id)}>Delete</button>\n              </div>\n              <p>\n                {\n                  note.body.length <= 50\n                  ? note.body\n                  : note.body.substr(0, 50) + \"...\"}\n              </p>\n              <small>\n                Last modified: {new Date(note.lastModified).toLocaleString()}\n              </small>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SideBar;\n","import { useEffect, useState } from \"react\";\nimport uuid from \"react-uuid\";\nimport \"./App.css\";\nimport Main from \"./component/Main\";\nimport SideBar from \"./component/Sidebar\";\n\nfunction App() {\n  const [notes, setNotes] = useState(\n    JSON.parse(localStorage.getItem(\"notes-app-react\")) || []\n  );\n  const [activeNote, setActiveNote] = useState(null);\n\n  useEffect(() => {\n    localStorage.setItem(\"notes-app-react\", JSON.stringify(notes));\n  }, [notes]);\n\n  const onAddNote = () => {\n    const newNote = {\n      id: uuid(),\n      title: \"Untitled Note\",\n      body: \"\",\n      lastModified: Date.now(),\n    };\n    setActiveNote(newNote.id);\n    setNotes((pre) => [...pre, newNote]);\n  };\n\n  const onDeleteNote = (id) => {\n    const newNotes = notes.filter((note) => note.id !== id);\n    setNotes(newNotes);\n  };\n\n  const getActiveNote = () => {\n    const noteSearch = notes.find((note) => note.id === activeNote);\n    return noteSearch;\n  };\n\n  const onUpdateNotes = (updateNote) => {\n    const updateNotes = notes.map((note) =>\n      note.id === activeNote ? updateNote : note\n    );\n    setNotes(updateNotes);\n  };\n\n  return (\n    <div className=\"App\">\n      <SideBar\n        notes={notes}\n        onAddNote={onAddNote}\n        onDeleteNote={onDeleteNote}\n        activeNote={activeNote}\n        setActiveNote={setActiveNote}\n      ></SideBar>\n      <Main activeNote={getActiveNote()} onUpdateNotes={onUpdateNotes}></Main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\ndocument.title = \"Notes App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}